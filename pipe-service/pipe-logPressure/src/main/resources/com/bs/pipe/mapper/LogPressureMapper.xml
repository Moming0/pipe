<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bs.pipe.mapper.LogPressureMapper">
	<resultMap id="BaseResultMap" type="com.bs.pipe.entity.po.LogPressure">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="pressure_id" property="pressureId" jdbcType="INTEGER" />
    	<result column="read_time" property="readTime" jdbcType="TIMESTAMP" />
		<result column="read_number" property="readNumber" jdbcType="DOUBLE" />
		<result column="status" property="status" jdbcType="VARCHAR" />
		<result column="tag" property="tag" jdbcType="VARCHAR" />
    	<result column="remark" property="remark" jdbcType="VARCHAR" />
	   	<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	   	<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
		<result column="deleted" property="deleted" jdbcType="BIT" />
	</resultMap>

	<sql id="columns">
		`log_pressure`.`id`,
		`log_pressure`.`pressure_id`,
		`log_pressure`.`read_time`,
		`log_pressure`.`read_number`,
		`log_pressure`.`status`,
		`log_pressure`.`tag`,
		`log_pressure`.`remark`,
		`log_pressure`.`create_time`,
		`log_pressure`.`update_time`,
		`log_pressure`.`deleted`
	</sql>

	<select id="selectLogPressureList" resultMap="BaseResultMap">
		select
		<include refid="columns"></include>
		from `log_pressure`
		<where>
			<if test="logPressure.id != null and logPressure.id != ''">
				`log_pressure`.`id` = #{logPressure.id}
			</if>
			<if test="logPressure.pressureId != null and logPressure.pressureId != ''">
				AND `log_pressure`.`pressure_id` = #{logPressure.pressureId}
			</if>
			<if test="startTime != null and startTime != ''">
  				AND `log_pressure`.`read_time` &gt;= #{startTime}
	  		</if>
	  		<if test="endTime != null and endTime != ''">
	  			AND `log_pressure`.`read_time` &lt; #{endTime}
	  		</if>
		</where>
		ORDER BY `log_pressure`.`pressure_id` ASC, `log_pressure`.`read_time` ASC  		
	</select>

	<select id="selectLogPressure" resultMap="BaseResultMap">
		select
		<include refid="columns"></include>
		from `log_pressure`
		<where>
			<if test="id != null and id != ''">
				`log_pressure`.`id` = #{id}
			</if>
		</where>
	</select>

	<insert id="insertLogPressure">
		insert into `log_pressure`
		(
		`log_pressure`.`pressure_id`,
		`log_pressure`.`read_time`,
		`log_pressure`.`read_number`,
		`log_pressure`.`status`,
		`log_pressure`.`tag`,
		`log_pressure`.`remark`,
		`log_pressure`.`create_time`,
		`log_pressure`.`deleted`
		)
		values
		(
		#{pressureId},
		#{readTime},
		#{readNumber},
		#{status},
		#{tag},
		#{remark},
		NOW(),
		#{deleted}
		)
	</insert>

	<update id="updateLogPressure">
		update `log_pressure`
		<set>
			<if test="pressureId != null and pressureId != ''">
				`pressure_id` = #{pressureId},
			</if>
			<if test="readTime != null and readTime != ''">
				`read_time` = #{readTime},
			</if>
			<if test="readNumber != null and readNumber != ''">
				`read_number` = #{readNumber},
			</if>
			<if test="status != null and status != ''">
				`status` = #{status},
			</if>
			<if test="tag != null and tag != ''">
				`tag` = #{tag},
			</if>
			<if test="remark != null and remark != ''">
				`remark` = #{remark},
			</if>
				`update_time` = NOW(),
			<if test="deleted != null">
				`deleted` = #{deleted},
			</if>
		</set>
		WHERE `log_pressure`.id = #{id}
	</update>

	<delete id="deleteLogPressure">
		DELETE FROM
		`log_pressure`
		WHERE `log_pressure`.id = #{id}
	</delete>

	<!-- 批量插入数据list -->
	<insert id="insertLogPressureList" parameterType="java.util.List">
		insert IGNORE into `log_pressure`
		(
		`log_pressure`.`pressure_id`,
		`log_pressure`.`read_time`,
		`log_pressure`.`read_number`,
		`log_pressure`.`status`,
		`log_pressure`.`tag`,
		`log_pressure`.`remark`,
		`log_pressure`.`create_time`,
		`log_pressure`.`deleted`
		)
		values
		
		<foreach collection="list" item="logPressureList" index="index" separator=",">
		(
		#{logPressureList.pressureId},
		#{logPressureList.readTime},
		#{logPressureList.readNumber},
		#{logPressureList.status},
		#{logPressureList.tag},
		#{logPressureList.remark},
		NOW(),
		#{logPressureList.deleted}
  		)
		</foreach>
	</insert >
	
</mapper>